// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Role {
  member
  admin
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique @db.Citext // 大小写不敏感
  username   String   @unique @db.Citext
  nickname   String?
  password   String
  profilePic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]
}

model Conversation {
  id      String  @id @default(cuid())
  isGroup Boolean @default(false)
  /**
   * “user123:user456”，make sure a par of users only have 1 conversation；for group chat is null
   */
  dmKey   String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ConversationParticipant[]

  messages Message[]

  @@index([updatedAt])
}

model ConversationParticipant {
  conversationId String
  userId         String
  role           Role     @default(member)
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
}
